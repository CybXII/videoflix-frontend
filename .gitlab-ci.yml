stages:
  - build
  - deploy

variables:
  NODE_VERSION: "21"

# Build Job für den Server "lukas"
build_job_lukas:
  stage: build
  image: node:${NODE_VERSION}-alpine
  before_script:
    # Spezifische environment.ts für den Server "lukas" anlegen
    - mkdir -p src/environments
    - |
      echo "export const environment = { production: true, baseUrl: 'https://backend.lukas-nolting.eu' };" > src/environments/environment.ts
  script:
    - echo "Verwende Node.js Version ${NODE_VERSION} für den Server 'lukas'"
    - npm install
    - npm run build --if-present
  artifacts:
    paths:
      - dist/videoflix_frontend/browser
  only:
    - alex

# Deploy Job für den Server "lukas" via FTPS
deploy_job_lukas_frontend:
  stage: deploy
  image: curlimages/curl:latest
  dependencies:
    - build_job_lukas
  script:
    - echo "Starte den FTPS-Upload für 'lukas'..."
    - find ./dist/videoflix_frontend/browser -type f | while read file; do
        remote_path="${file#./dist/videoflix_frontend/browser/}";
        curl --ftp-ssl --ftp-create-dirs --user "$LUKASUSERNAME:$LUKASPASSWORD" -T "$file" "ftp://${LUKASHOST}:21/$remote_path";
      done
  only:
    - alex

# Build Job für den Server "alex"
build_job_alex:
  stage: build
  image: node:${NODE_VERSION}-alpine
  before_script:
    # Spezifische environment.ts für den Server "alex" anlegen
    - mkdir -p src/environments
    - |
      echo "export const environment = { production: true, baseUrl: 'https://luft-alex.de' };" > src/environments/environment.ts
  script:
    - echo "Verwende Node.js Version ${NODE_VERSION} für den Server 'alex'"
    - npm install
    - npm run build --if-present
  artifacts:
    paths:
      - dist/videoflix_frontend/browser
  only:
    - alex

# Deploy Job für den Server "alex" test
deploy_job_alex_frontend:
  stage: deploy
  image: curlimages/curl:latest
  dependencies:
    - build_job_alex
  script:
    - echo "Starte den FTPS-Upload für 'alex'..."
    - find ./dist/videoflix_frontend/browser -type f | while read file; do
        remote_path="${file#./dist/videoflix_frontend/browser/}";
        curl --ftp-ssl --ftp-create-dirs --user "$ALEXUSERNAME:$ALEXPASSWORD" -T "$file" "ftp://${ALEXHOST}:21/$remote_path";
      done
  only:
    - alex



# Build Job für den Server "benjamin"
build_job_benjamin:
  stage: build
  image: node:${NODE_VERSION}-alpine
  before_script:
    - mkdir -p src/environments
    - |
      echo "export const environment = { production: true, baseUrl: 'https://backend-benjamin-tietz.de' };" > src/environments/environment.ts
  script:
    - echo "Verwende Node.js Version ${NODE_VERSION} für den Server 'benjamin'"
    - npm install
    - npm run build --if-present
  artifacts:
    paths:
      - dist/videoflix_frontend/browser
  only:
    - alex

# Deploy Job für den Server "benjamin"
deploy_job_benjamin:
  stage: deploy
  image: curlimages/curl:latest
  dependencies:
    - build_job_benjamin
  script:
    - echo "Starte den FTPS-Upload für 'benjamin'..."
    - find ./dist/videoflix_frontend/browser -type f | while read file; do
        remote_path="${file#./dist/videoflix_frontend/browser/}";
        curl --ftp-ssl --ftp-create-dirs --user "$BENJAMINUSERNAME:$BENJAMINPASSWORD" -T "$file" "ftp://${BENJAMINHOST}/$remote_path";
      done
  only:
    - alex
